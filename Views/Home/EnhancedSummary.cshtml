@* @{
    ViewData["Title"] = "Advanced Summary Dashboard";
}

<style>
    .dashboard-container {
        background: #f8fafc;
        min-height: 100vh;
        padding: 20px;
    }

    .dashboard-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .filter-panel {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        margin-bottom: 30px;
        border-left: 5px solid #667eea;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-left: 5px solid #10b981;
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 15px 40px rgba(0,0,0,0.15);
    }

    .stat-card.danger {
        border-left-color: #ef4444;
    }

    .stat-card.warning {
        border-left-color: #f59e0b;
    }

    .stat-card.info {
        border-left-color: #3b82f6;
    }

    .stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-change {
        margin-top: 10px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .stat-change.positive {
        color: #10b981;
    }

    .stat-change.negative {
        color: #ef4444;
    }

    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 30px;
        margin-bottom: 30px;
    }

    .chart-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        overflow: hidden;
    }

    .chart-header {
        padding: 20px 25px;
        border-bottom: 1px solid #e5e7eb;
        background: #f9fafb;
    }

    .chart-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1f2937;
        margin: 0;
    }

    .chart-content {
        padding: 20px;
        height: 350px;
    }

    .full-width-chart {
        grid-column: 1 / -1;
    }

    .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        align-items: end;
    }

    .filter-item {
        flex: 1;
        min-width: 200px;
    }

    .filter-item label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #374151;
        font-size: 0.9rem;
    }

    .filter-item select,
    .filter-item input {
        width: 100%;
        padding: 10px 15px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: border-color 0.3s ease;
    }

    .filter-item select:focus,
    .filter-item input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .btn-apply-filter {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

    .btn-apply-filter:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

    .loading-overlay.show {
        opacity: 1;
        visibility: visible;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e5e7eb;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .peak-times-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .peak-times-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #e5e7eb;
    }

    .peak-times-list li:last-child {
        border-bottom: none;
    }

    .peak-time {
        font-weight: 600;
        color: #1f2937;
    }

    .peak-count {
        background: #667eea;
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    @@media (max-width: 768px) {
        .charts-grid {
            grid-template-columns: 1fr;
        }

        .filter-group {
            flex-direction: column;
        }

        .filter-item {
            min-width: auto;
        }
    }
</style>

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
        <h1 class="mb-0">📊 Advanced eKYC Analytics Dashboard</h1>
        <p class="mb-0 mt-2 opacity-75">Comprehensive insights into your eKYC operations with real-time filtering and peak analysis</p>
    </div>

    <!-- Filter Panel -->
    <div class="filter-panel">
        <div class="loading-overlay" id="filterLoading">
            <div class="loading-spinner"></div>
        </div>

        <h3 class="mb-3">🔍 Advanced Filters</h3>
        <div class="filter-group">
            <div class="filter-item">
                <label for="fromDate">From Date</label>
                <input type="date" id="fromDate" class="form-control">
            </div>
            <div class="filter-item">
                <label for="toDate">To Date</label>
                <input type="date" id="toDate" class="form-control">
            </div>
            <div class="filter-item">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="form-control">
                    <option value="">All Statuses</option>
                </select>
            </div>
            <div class="filter-item">
                <label for="flowFilter">Flow</label>
                <select id="flowFilter" class="form-control">
                    <option value="">All Flows</option>
                </select>
            </div>
            <div class="filter-item">
                <label for="channelFilter">Channel</label>
                <select id="channelFilter" class="form-control">
                    <option value="">All Channels</option>
                </select>
            </div>
            <div class="filter-item">
                <button class="btn-apply-filter" onclick="applyFilters()">
                    <i class="fas fa-search"></i> Apply Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid" id="statsGrid">
        <!-- Stats will be populated dynamically -->
    </div>

    <!-- Charts Grid -->
    <div class="charts-grid">
        <!-- Time Series Chart -->
        <div class="chart-container full-width-chart">
            <div class="loading-overlay" id="timeSeriesLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">📈 Activity Timeline</h3>
            </div>
            <div class="chart-content" id="timeSeriesChart"></div>
        </div>

        <!-- Status Distribution -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">📊 Status Distribution</h3>
            </div>
            <div class="chart-content" id="statusChart"></div>
        </div>

        <!-- Flow Distribution -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">🔄 Flow Distribution</h3>
            </div>
            <div class="chart-content" id="flowChart"></div>
        </div>

        <!-- Hourly Peak Analysis -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">⏰ Hourly Activity Pattern</h3>
            </div>
            <div class="chart-content" id="hourlyChart"></div>
        </div>

        <!-- Weekly Pattern -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">📅 Weekly Pattern</h3>
            </div>
            <div class="chart-content" id="weeklyChart"></div>
        </div>

        <!-- Peak Hours List -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">🔥 Peak Hours Analysis</h3>
            </div>
            <div class="chart-content">
                <ul class="peak-times-list" id="peakTimesList">
                    <!-- Peak times will be populated dynamically -->
                </ul>
            </div>
        </div>

        <!-- Channel Distribution -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">📡 Channel Distribution</h3>
            </div>
            <div class="chart-content" id="channelChart"></div>
        </div>

        <!-- Success Rate -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">✅ Success Rate Analysis</h3>
            </div>
            <div class="chart-content" id="successChart"></div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let charts = {};
        let currentFilters = {};

        // Initialize the dashboard
        $(document).ready(function() {
            initializeDateInputs();
            loadFilterOptions();
            loadDashboardData();
        });

        function initializeDateInputs() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));

            $('#toDate').val(today.toISOString().split('T')[0]);
            $('#fromDate').val(thirtyDaysAgo.toISOString().split('T')[0]);
        }

        async function loadFilterOptions() {
            try {
                $('#filterLoading').addClass('show');
                const response = await fetch('@Url.Action("GetFilterOptions", "Home")');
                const result = await response.json();

                if (result.status === 0) {
                    populateFilterDropdowns(result.data);
                }
            } catch (error) {
                console.error('Error loading filter options:', error);
            } finally {
                $('#filterLoading').removeClass('show');
            }
        }

        function populateFilterDropdowns(data) {
            // Populate status dropdown
            const statusSelect = $('#statusFilter');
            data.statuses.forEach(status => {
                statusSelect.append(`<option value="${status}">${status}</option>`);
            });

            // Populate flow dropdown
            const flowSelect = $('#flowFilter');
            data.flows.forEach(flow => {
                flowSelect.append(`<option value="${flow}">${flow}</option>`);
            });

            // Populate channel dropdown
            const channelSelect = $('#channelFilter');
            data.channels.forEach(channel => {
                channelSelect.append(`<option value="${channel.value}">${channel.label}</option>`);
            });
        }

        async function applyFilters() {
            currentFilters = {
                fromDate: $('#fromDate').val(),
                toDate: $('#toDate').val(),
                status: $('#statusFilter').val(),
                flow: $('#flowFilter').val(),
                channel: $('#channelFilter').val()
            };

            await loadDashboardData();
        }

        async function loadDashboardData() {
            try {
                showAllLoadingStates();

                const response = await fetch('@Url.Action("GetAdvancedSummaryData", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(currentFilters)
                });

                const result = await response.json();

                if (result.status === 0) {
                    updateStatsCards(result.data);
                    updateCharts(result.data);
                } else {
                    console.error('Error loading dashboard data:', result.message);
                }
            } catch (error) {
                console.error('Error:', error);
            } finally {
                hideAllLoadingStates();
            }
        }

        function showAllLoadingStates() {
            $('#timeSeriesLoading').addClass('show');
            // Add other loading states as needed
        }

        function hideAllLoadingStates() {
            $('.loading-overlay').removeClass('show');
        }

        function updateStatsCards(data) {
            const statsHtml = `
                <div class="stat-card">
                    <div class="stat-value">${data.total_sessions.toLocaleString()}</div>
                    <div class="stat-label">Total Sessions</div>
                </div>
                <div class="stat-card info">
                    <div class="stat-value">${data.success_rate.success_percentage}%</div>
                    <div class="stat-label">Success Rate</div>
                    <div class="stat-change positive">
                        ${data.success_rate.successful.toLocaleString()} successful
                    </div>
                </div>
                <div class="stat-card warning">
                    <div class="stat-value">${data.success_rate.failed.toLocaleString()}</div>
                    <div class="stat-label">Failed Sessions</div>
                </div>
                <div class="stat-card danger">
                    <div class="stat-value">${data.peak_hours[0]?.hour || 'N/A'}</div>
                    <div class="stat-label">Peak Hour</div>
                    <div class="stat-change">
                        ${data.peak_hours[0]?.count || 0} sessions
                    </div>
                </div>
            `;

            $('#statsGrid').html(statsHtml);
        }

        function updateCharts(data) {
            // Time Series Chart
            updateTimeSeriesChart(data.time_series);

            // Status Distribution
            updateStatusChart(data.status_breakdown);

            // Flow Distribution
            updateFlowChart(data.flow_distribution);

            // Hourly Activity
            updateHourlyChart(data.hourly_distribution);

            // Weekly Pattern
            updateWeeklyChart(data.daily_distribution);

            // Channel Distribution
            updateChannelChart(data.channel_distribution);

            // Success Rate
            updateSuccessChart(data.success_rate);

            // Peak Hours List
            updatePeakHoursList(data.peak_hours);
        }

        function updateTimeSeriesChart(timeSeriesData) {
            if (charts.timeSeries) {
                charts.timeSeries.dispose();
            }

            const chart = echarts.init(document.getElementById('timeSeriesChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#667eea'
                        }
                    },
                    formatter: function(params) {
                        let tooltip = `<div style="font-weight: bold; margin-bottom: 10px;">${params[0].axisValue}</div>`;
                        params.forEach(param => {
                            tooltip += `<div style="margin: 5px 0;">
                                <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: ${param.color}; margin-right: 8px;"></span>
                                ${param.seriesName}: <strong>${param.value}</strong>
                            </div>`;
                        });
                        return tooltip;
                    }
                },
                legend: {
                    data: ['Total', 'Approved', 'Pending', 'Rejected', 'Working'],
                    top: 10
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '15%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    boundaryGap: false,
                    data: timeSeriesData.map(item => item.date),
                    axisLabel: {
                        rotate: 45
                    }
                },
                yAxis: {
                    type: 'value',
                    axisLabel: {
                        formatter: '{value}'
                    }
                },
                series: [
                    {
                        name: 'Total',
                        type: 'line',
                        data: timeSeriesData.map(item => item.total),
                        lineStyle: { width: 3 },
                        areaStyle: { opacity: 0.1 }
                    },
                    {
                        name: 'Approved',
                        type: 'line',
                        data: timeSeriesData.map(item => item.approved),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#10b981' }
                    },
                    {
                        name: 'Pending',
                        type: 'line',
                        data: timeSeriesData.map(item => item.pending),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#f59e0b' }
                    },
                    {
                        name: 'Rejected',
                        type: 'line',
                        data: timeSeriesData.map(item => item.rejected),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#ef4444' }
                    },
                    {
                        name: 'Working',
                        type: 'line',
                        data: timeSeriesData.map(item => item.working),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#3b82f6' }
                    }
                ]
            };

            chart.setOption(option);
            charts.timeSeries = chart;
        }

        function updateStatusChart(statusData) {
            if (charts.status) {
                charts.status.dispose();
            }

            const chart = echarts.init(document.getElementById('statusChart'));

            const colors = {
                'approved': '#10b981',
                'approval_pending': '#f59e0b',
                'to_discard': '#ef4444',
                'working': '#3b82f6'
            };

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)'
                },
                series: [{
                    name: 'Status Distribution',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    itemStyle: {
                        borderRadius: 5,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    label: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        label: {
                            show: true,
                            fontSize: '18',
                            fontWeight: 'bold'
                        }
                    },
                    labelLine: {
                        show: false
                    },
                    data: statusData.map(item => ({
                        value: item.count,
                        name: item.status,
                        itemStyle: {
                            color: colors[item.status] || '#6b7280'
                        }
                    }))
                }]
            };

            chart.setOption(option);
            charts.status = chart;
        }

        function updateFlowChart(flowData) {
            if (charts.flow) {
                charts.flow.dispose();
            }

            const chart = echarts.init(document.getElementById('flowChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '15%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: flowData.map(item => item.flow),
                    axisLabel: {
                        rotate: 45
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: flowData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                { offset: 0, color: '#667eea' },
                                { offset: 1, color: '#764ba2' }
                            ])
                        }
                    })),
                    barWidth: '60%',
                    itemStyle: {
                        borderRadius: [4, 4, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.flow = chart;
        }

        function updateHourlyChart(hourlyData) {
            if (charts.hourly) {
                charts.hourly.dispose();
            }

            const chart = echarts.init(document.getElementById('hourlyChart'));

            // Fill missing hours with 0
            const fullHourlyData = Array.from({length: 24}, (_, hour) => {
                const found = hourlyData.find(item => item.hour === hour);
                return {
                    hour: hour,
                    count: found ? found.count : 0
                };
            });

            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: 'Hour {b}:00<br/>Sessions: <strong>{c}</strong>'
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: fullHourlyData.map(item => item.hour + ':00'),
                    axisLabel: {
                        interval: 1
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: fullHourlyData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: item.count > 0 ?
                                new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                    { offset: 0, color: '#10b981' },
                                    { offset: 1, color: '#059669' }
                                ]) : '#e5e7eb'
                        }
                    })),
                    barWidth: '80%',
                    itemStyle: {
                        borderRadius: [2, 2, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.hourly = chart;
        }

        function updateWeeklyChart(dailyData) {
            if (charts.weekly) {
                charts.weekly.dispose();
            }

            const chart = echarts.init(document.getElementById('weeklyChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: '{b}<br/>Sessions: <strong>{c}</strong>'
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: dailyData.map(item => item.day)
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: dailyData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                { offset: 0, color: '#3b82f6' },
                                { offset: 1, color: '#1d4ed8' }
                            ])
                        }
                    })),
                    barWidth: '60%',
                    itemStyle: {
                        borderRadius: [4, 4, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.weekly = chart;
        }

        function updateChannelChart(channelData) {
            if (charts.channel) {
                charts.channel.dispose();
            }

            const chart = echarts.init(document.getElementById('channelChart'));

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)'
                },
                series: [{
                    name: 'Channel Distribution',
                    type: 'pie',
                    radius: '70%',
                    data: channelData.map((item, index) => ({
                        value: item.count,
                        name: item.channel,
                        itemStyle: {
                            color: ['#667eea', '#764ba2', '#f093fb', '#f5576c'][index % 4]
                        }
                    })),
                    itemStyle: {
                        borderRadius: 5,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            chart.setOption(option);
            charts.channel = chart;
        }

        function updateSuccessChart(successData) {
            if (charts.success) {
                charts.success.dispose();
            }

            const chart = echarts.init(document.getElementById('successChart'));

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function(params) {
                        if (params.name === 'Success Rate') {
                            return `Success Rate: <strong>${params.value}%</strong>`;
                        }
                        return `${params.name}: <strong>${params.value}</strong>`;
                    }
                },
                series: [
                    {
                        name: 'Success Rate',
                        type: 'gauge',
                        startAngle: 180,
                        endAngle: 0,
                        min: 0,
                        max: 100,
                        splitNumber: 10,
                        itemStyle: {
                            color: '#10b981'
                        },
                        progress: {
                            show: true,
                            width: 30
                        },
                        pointer: {
                            show: false
                        },
                        axisLine: {
                            lineStyle: {
                                width: 30,
                                color: [[1, '#e5e7eb']]
                            }
                        },
                        axisTick: {
                            distance: -45,
                            splitNumber: 5,
                            lineStyle: {
                                width: 2,
                                color: '#999'
                            }
                        },
                        splitLine: {
                            distance: -52,
                            length: 14,
                            lineStyle: {
                                width: 3,
                                color: '#999'
                            }
                        },
                        axisLabel: {
                            distance: -20,
                            color: '#999',
                            fontSize: 12
                        },
                        anchor: {
                            show: false
                        },
                        title: {
                            show: false
                        },
                        detail: {
                            valueAnimation: true,
                            width: '60%',
                            lineHeight: 40,
                            borderRadius: 8,
                            offsetCenter: [0, '-15%'],
                            fontSize: 24,
                            fontWeight: 'bolder',
                            formatter: '{value}%',
                            color: 'inherit'
                        },
                        data: [{
                            value: successData.success_percentage,
                            name: 'Success Rate'
                        }]
                    }
                ]
            };

            chart.setOption(option);
            charts.success = chart;
        }

        function updatePeakHoursList(peakHours) {
            const peakList = $('#peakTimesList');
            peakList.empty();

            peakHours.forEach((peak, index) => {
                const rankBadge = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${peak.rank}`;
                const timeFormat = peak.hour < 12 ? `${peak.hour || 12}:00 AM` : `${peak.hour - 12 || 12}:00 PM`;

                peakList.append(`
                    <li>
                        <div>
                            <span class="peak-time">${rankBadge} ${timeFormat}</span>
                        </div>
                        <div>
                            <span class="peak-count">${peak.count}</span>
                        </div>
                    </li>
                `);
            });
        }

        // Handle window resize for charts
        window.addEventListener('resize', function() {
            Object.values(charts).forEach(chart => {
                if (chart && chart.resize) {
                    chart.resize();
                }
            });
        });

        // Auto-refresh every 5 minutes
        setInterval(function() {
            if (document.visibilityState === 'visible') {
                loadDashboardData();
            }
        }, 5 * 60 * 1000);
    </script>
} *@
@{
    ViewData["Title"] = "Advanced Summary Dashboard";
}

<style>
    .dashboard-container {
        background: #f8fafc;
        min-height: 100vh;
        padding: 20px;
    }

    .dashboard-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .filter-panel {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        margin-bottom: 30px;
        border-left: 5px solid #667eea;
        position: relative;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        padding: 25px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-left: 5px solid #10b981;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0,0,0,0.15);
        }

        .stat-card.danger {
            border-left-color: #ef4444;
        }

        .stat-card.warning {
            border-left-color: #f59e0b;
        }

        .stat-card.info {
            border-left-color: #3b82f6;
        }

    .stat-value {
        font-size: 2.5rem;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 5px;
    }

    .stat-label {
        color: #6b7280;
        font-size: 0.9rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .stat-change {
        margin-top: 10px;
        font-size: 0.8rem;
        font-weight: 600;
    }

        .stat-change.positive {
            color: #10b981;
        }

        .stat-change.negative {
            color: #ef4444;
        }

    .charts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        gap: 30px;
        margin-bottom: 30px;
    }

    .chart-container {
        background: white;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        overflow: hidden;
        position: relative;
    }

    .chart-header {
        padding: 20px 25px;
        border-bottom: 1px solid #e5e7eb;
        background: #f9fafb;
    }

    .chart-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #1f2937;
        margin: 0;
    }

    .chart-content {
        padding: 20px;
        height: 350px;
    }

    .full-width-chart {
        grid-column: 1 / -1;
    }

    .filter-group {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        align-items: end;
    }

    .filter-item {
        flex: 1;
        min-width: 200px;
    }

        .filter-item label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #374151;
            font-size: 0.9rem;
        }

        .filter-item select,
        .filter-item input {
            width: 100%;
            padding: 10px 15px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.9rem;
            transition: border-color 0.3s ease;
        }

            .filter-item select:focus,
            .filter-item input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

    .btn-apply-filter {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

        .btn-apply-filter:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
    }

        .loading-overlay.show {
            opacity: 1;
            visibility: visible;
        }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e5e7eb;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .peak-times-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

        .peak-times-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px solid #e5e7eb;
        }

            .peak-times-list li:last-child {
                border-bottom: none;
            }

    .peak-time {
        font-weight: 600;
        color: #1f2937;
    }

    .peak-count {
        background: #667eea;
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .error-message {
        background: #fee2e2;
        border: 1px solid #fca5a5;
        color: #dc2626;
        padding: 15px;
        border-radius: 8px;
        margin: 20px 0;
        text-align: center;
    }

    @@media (max-width: 768px) {
        .charts-grid

    {
        grid-template-columns: 1fr;
    }

    .filter-group {
        flex-direction: column;
    }

    .filter-item {
        min-width: auto;
    }

    }
</style>

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
        <h1 class="mb-0">📊 Advanced eKYC Analytics Dashboard</h1>
        <p class="mb-0 mt-2 opacity-75">Comprehensive insights into your eKYC operations with real-time filtering and peak analysis</p>
    </div>

    <!-- Error Message Container -->
    <div id="errorMessage" class="error-message" style="display: none;">
        <strong>Error:</strong> <span id="errorText"></span>
    </div>

    <!-- Filter Panel -->
    <div class="filter-panel">
        <div class="loading-overlay" id="filterLoading">
            <div class="loading-spinner"></div>
        </div>

        <h3 class="mb-3">🔍 Advanced Filters</h3>
        <div class="filter-group">
            <div class="filter-item">
                <label for="fromDate">From Date</label>
                <input type="date" id="fromDate" class="form-control">
            </div>
            <div class="filter-item">
                <label for="toDate">To Date</label>
                <input type="date" id="toDate" class="form-control">
            </div>
            <div class="filter-item">
                <label for="statusFilter">Status</label>
                <select id="statusFilter" class="form-control">
                    <option value="">All Statuses</option>
                </select>
            </div>
            <div class="filter-item">
                <label for="flowFilter">Flow</label>
                <select id="flowFilter" class="form-control">
                    <option value="">All Flows</option>
                </select>
            </div>
            <div class="filter-item">
                <label for="channelFilter">Channel</label>
                <select id="channelFilter" class="form-control">
                    <option value="">All Channels</option>
                </select>
            </div>
            <div class="filter-item">
                <button class="btn-apply-filter" onclick="applyFilters()">
                    <i class="fas fa-search"></i> Apply Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Stats Grid -->
    <div class="stats-grid" id="statsGrid">
        <!-- Stats will be populated dynamically -->
    </div>

    <!-- Charts Grid -->
    <div class="charts-grid">
        <!-- Time Series Chart -->
        <div class="chart-container full-width-chart">
            <div class="loading-overlay" id="timeSeriesLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">📈 Activity Timeline</h3>
            </div>
            <div class="chart-content" id="timeSeriesChart"></div>
        </div>

        <!-- Status Distribution -->
        <div class="chart-container">
            <div class="loading-overlay" id="statusLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">📊 Status Distribution</h3>
            </div>
            <div class="chart-content" id="statusChart"></div>
        </div>

        <!-- Flow Distribution -->
        <div class="chart-container">
            <div class="loading-overlay" id="flowLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">🔄 Flow Distribution</h3>
            </div>
            <div class="chart-content" id="flowChart"></div>
        </div>

        <!-- Hourly Peak Analysis -->
        <div class="chart-container">
            <div class="loading-overlay" id="hourlyLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">⏰ Hourly Activity Pattern</h3>
            </div>
            <div class="chart-content" id="hourlyChart"></div>
        </div>

        <!-- Weekly Pattern -->
        <div class="chart-container">
            <div class="loading-overlay" id="weeklyLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">📅 Weekly Pattern</h3>
            </div>
            <div class="chart-content" id="weeklyChart"></div>
        </div>

        <!-- Peak Hours List -->
        <div class="chart-container">
            <div class="chart-header">
                <h3 class="chart-title">🔥 Peak Hours Analysis</h3>
            </div>
            <div class="chart-content">
                <ul class="peak-times-list" id="peakTimesList">
                    <!-- Peak times will be populated dynamically -->
                </ul>
            </div>
        </div>

        <!-- Channel Distribution -->
        <div class="chart-container">
            <div class="loading-overlay" id="channelLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">📡 Channel Distribution</h3>
            </div>
            <div class="chart-content" id="channelChart"></div>
        </div>

        <!-- Success Rate -->
        <div class="chart-container">
            <div class="loading-overlay" id="successLoading">
                <div class="loading-spinner"></div>
            </div>
            <div class="chart-header">
                <h3 class="chart-title">✅ Success Rate Analysis</h3>
            </div>
            <div class="chart-content" id="successChart"></div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- ECharts Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/echarts/5.4.3/echarts.min.js"></script>

    <script>
        let charts = {};
        let currentFilters = {};

        // Initialize the dashboard
        $(document).ready(function() {
            initializeDateInputs();
            loadFilterOptions();
            loadDashboardData();
        });

        function initializeDateInputs() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));

            $('#toDate').val(today.toISOString().split('T')[0]);
            $('#fromDate').val(thirtyDaysAgo.toISOString().split('T')[0]);
        }

        function showError(message) {
            $('#errorText').text(message);
            $('#errorMessage').show();
            setTimeout(() => {
                $('#errorMessage').fadeOut();
            }, 5000);
        }

        function hideError() {
            $('#errorMessage').hide();
        }

        async function loadFilterOptions() {
            try {
                $('#filterLoading').addClass('show');
                const response = await fetch('@Url.Action("GetFilterOptions", "Home")');
                const result = await response.json();

                console.log('Filter options response:', result);

                if (result.status === 0 && result.data) {
                    populateFilterDropdowns(result.data);
                } else {
                    showError('Failed to load filter options: ' + (result.message || 'Unknown error'));
                }
            } catch (error) {
                console.error('Error loading filter options:', error);
                showError('Network error loading filter options: ' + error.message);
            } finally {
                $('#filterLoading').removeClass('show');
            }
        }

        function populateFilterDropdowns(data) {
            // Populate status dropdown
            const statusSelect = $('#statusFilter');
            if (data.statuses && Array.isArray(data.statuses)) {
                data.statuses.forEach(status => {
                    statusSelect.append(`<option value="${status}">${status}</option>`);
                });
            }

            // Populate flow dropdown
            const flowSelect = $('#flowFilter');
            if (data.flows && Array.isArray(data.flows)) {
                data.flows.forEach(flow => {
                    flowSelect.append(`<option value="${flow}">${flow}</option>`);
                });
            }

            // Populate channel dropdown
            const channelSelect = $('#channelFilter');
            if (data.channels && Array.isArray(data.channels)) {
                data.channels.forEach(channel => {
                    channelSelect.append(`<option value="${channel.value}">${channel.label}</option>`);
                });
            }
        }

        async function applyFilters() {
            currentFilters = {
                fromDate: $('#fromDate').val(),
                toDate: $('#toDate').val(),
                status: $('#statusFilter').val(),
                flow: $('#flowFilter').val(),
                channel: $('#channelFilter').val()
            };

            console.log('Applying filters:', currentFilters);
            await loadDashboardData();
        }

        async function loadDashboardData() {
            try {
                hideError();
                showAllLoadingStates();

                const response = await fetch('@Url.Action("GetAdvancedSummaryData", "Home")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(currentFilters)
                });

                const result = await response.json();

                console.log('Dashboard data response:', result);
                console.log('Data structure:', result.data);

                if (result.status === 0 && result.data) {
                    updateStatsCards(result.data);
                    updateCharts(result.data);
                } else {
                    showError('Failed to load dashboard data: ' + (result.message || 'Unknown error'));
                    console.error('Error loading dashboard data:', result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                showError('Network error loading dashboard data: ' + error.message);
            } finally {
                hideAllLoadingStates();
            }
        }

        function showAllLoadingStates() {
            $('.loading-overlay').addClass('show');
        }

        function hideAllLoadingStates() {
            $('.loading-overlay').removeClass('show');
        }

        function updateStatsCards(data) {
            // Handle both camelCase and snake_case property names
            const totalSessions = data.total_sessions || data.totalSessions || 0;
            const successRate = data.success_rate || data.successRate || {};
            const peakHours = data.peak_hours || data.peakHours || [];

            const statsHtml = `
                <div class="stat-card">
                    <div class="stat-value">${totalSessions.toLocaleString()}</div>
                    <div class="stat-label">Total Sessions</div>
                </div>
                <div class="stat-card info">
                    <div class="stat-value">${(successRate.success_percentage || successRate.successPercentage || 0)}%</div>
                    <div class="stat-label">Success Rate</div>
                    <div class="stat-change positive">
                        ${(successRate.successful || 0).toLocaleString()} successful
                    </div>
                </div>
                <div class="stat-card warning">
                    <div class="stat-value">${(successRate.failed || 0).toLocaleString()}</div>
                    <div class="stat-label">Failed Sessions</div>
                </div>
                <div class="stat-card danger">
                    <div class="stat-value">${peakHours[0]?.hour !== undefined ? peakHours[0].hour : 'N/A'}</div>
                    <div class="stat-label">Peak Hour</div>
                    <div class="stat-change">
                        ${peakHours[0]?.count || 0} sessions
                    </div>
                </div>
            `;

            $('#statsGrid').html(statsHtml);
        }

        function updateCharts(data) {
            // Handle both camelCase and snake_case property names
            const timeSeries = data.time_series || data.timeSeries || [];
            const statusBreakdown = data.status_breakdown || data.statusBreakdown || [];
            const flowDistribution = data.flow_distribution || data.flowDistribution || [];
            const hourlyDistribution = data.hourly_distribution || data.hourlyDistribution || [];
            const dailyDistribution = data.daily_distribution || data.dailyDistribution || [];
            const channelDistribution = data.channel_distribution || data.channelDistribution || [];
            const successRate = data.success_rate || data.successRate || {};
            const peakHours = data.peak_hours || data.peakHours || [];

            console.log('Updating charts with data:', {
                timeSeries: timeSeries.length,
                statusBreakdown: statusBreakdown.length,
                flowDistribution: flowDistribution.length,
                hourlyDistribution: hourlyDistribution.length,
                dailyDistribution: dailyDistribution.length,
                channelDistribution: channelDistribution.length,
                peakHours: peakHours.length
            });

            // Update charts with the correct data
            updateTimeSeriesChart(timeSeries);
            updateStatusChart(statusBreakdown);
            updateFlowChart(flowDistribution);
            updateHourlyChart(hourlyDistribution);
            updateWeeklyChart(dailyDistribution);
            updateChannelChart(channelDistribution);
            updateSuccessChart(successRate);
            updatePeakHoursList(peakHours);
        }

        function updateTimeSeriesChart(timeSeriesData) {
            if (charts.timeSeries) {
                charts.timeSeries.dispose();
            }

            const chart = echarts.init(document.getElementById('timeSeriesChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'cross',
                        label: {
                            backgroundColor: '#667eea'
                        }
                    },
                    formatter: function(params) {
                        let tooltip = `<div style="font-weight: bold; margin-bottom: 10px;">${new Date(params[0].axisValue).toLocaleDateString()}</div>`;
                        params.forEach(param => {
                            tooltip += `<div style="margin: 5px 0;">
                                <span style="display: inline-block; width: 10px; height: 10px; border-radius: 50%; background-color: ${param.color}; margin-right: 8px;"></span>
                                ${param.seriesName}: <strong>${param.value}</strong>
                            </div>`;
                        });
                        return tooltip;
                    }
                },
                legend: {
                    data: ['Total', 'Approved', 'Pending', 'Rejected', 'Working'],
                    top: 10
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '15%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    boundaryGap: false,
                    data: timeSeriesData.map(item => new Date(item.date).toLocaleDateString()),
                    axisLabel: {
                        rotate: 45
                    }
                },
                yAxis: {
                    type: 'value',
                    axisLabel: {
                        formatter: '{value}'
                    }
                },
                series: [
                    {
                        name: 'Total',
                        type: 'line',
                        data: timeSeriesData.map(item => item.total),
                        lineStyle: { width: 3 },
                        areaStyle: { opacity: 0.1 },
                        itemStyle: { color: '#667eea' }
                    },
                    {
                        name: 'Approved',
                        type: 'line',
                        data: timeSeriesData.map(item => item.approved),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#10b981' }
                    },
                    {
                        name: 'Pending',
                        type: 'line',
                        data: timeSeriesData.map(item => item.pending),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#f59e0b' }
                    },
                    {
                        name: 'Rejected',
                        type: 'line',
                        data: timeSeriesData.map(item => item.rejected),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#ef4444' }
                    },
                    {
                        name: 'Working',
                        type: 'line',
                        data: timeSeriesData.map(item => item.working),
                        lineStyle: { width: 2 },
                        itemStyle: { color: '#3b82f6' }
                    }
                ]
            };

            chart.setOption(option);
            charts.timeSeries = chart;
        }

        function updateStatusChart(statusData) {
            if (charts.status) {
                charts.status.dispose();
            }

            const chart = echarts.init(document.getElementById('statusChart'));

            const colors = {
                'approved': '#10b981',
                'approval_pending': '#f59e0b',
                'to_discard': '#ef4444',
                'working': '#3b82f6',
                'created': '#6b7280'
            };

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)'
                },
                series: [{
                    name: 'Status Distribution',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    itemStyle: {
                        borderRadius: 5,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    label: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        label: {
                            show: true,
                            fontSize: '18',
                            fontWeight: 'bold'
                        }
                    },
                    labelLine: {
                        show: false
                    },
                    data: statusData.map(item => ({
                        value: item.count,
                        name: item.status,
                        itemStyle: {
                            color: colors[item.status] || '#6b7280'
                        }
                    }))
                }]
            };

            chart.setOption(option);
            charts.status = chart;
        }

        function updateFlowChart(flowData) {
            if (charts.flow) {
                charts.flow.dispose();
            }

            const chart = echarts.init(document.getElementById('flowChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: {
                        type: 'shadow'
                    }
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '15%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: flowData.map(item => item.flow),
                    axisLabel: {
                        rotate: 45
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: flowData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                { offset: 0, color: '#667eea' },
                                { offset: 1, color: '#764ba2' }
                            ])
                        }
                    })),
                    barWidth: '60%',
                    itemStyle: {
                        borderRadius: [4, 4, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.flow = chart;
        }

        function updateHourlyChart(hourlyData) {
            if (charts.hourly) {
                charts.hourly.dispose();
            }

            const chart = echarts.init(document.getElementById('hourlyChart'));

            // Fill missing hours with 0
            const fullHourlyData = Array.from({length: 24}, (_, hour) => {
                const found = hourlyData.find(item => item.hour === hour);
                return {
                    hour: hour,
                    count: found ? found.count : 0
                };
            });

            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: 'Hour {b}:00<br/>Sessions: <strong>{c}</strong>'
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: fullHourlyData.map(item => item.hour + ':00'),
                    axisLabel: {
                        interval: 1
                    }
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: fullHourlyData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: item.count > 0 ?
                                new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                    { offset: 0, color: '#10b981' },
                                    { offset: 1, color: '#059669' }
                                ]) : '#e5e7eb'
                        }
                    })),
                    barWidth: '80%',
                    itemStyle: {
                        borderRadius: [2, 2, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.hourly = chart;
        }

        function updateWeeklyChart(dailyData) {
            if (charts.weekly) {
                charts.weekly.dispose();
            }

            const chart = echarts.init(document.getElementById('weeklyChart'));

            const option = {
                tooltip: {
                    trigger: 'axis',
                    formatter: '{b}<br/>Sessions: <strong>{c}</strong>'
                },
                grid: {
                    left: '3%',
                    right: '4%',
                    bottom: '10%',
                    top: '10%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: dailyData.map(item => item.day)
                },
                yAxis: {
                    type: 'value'
                },
                series: [{
                    name: 'Sessions',
                    type: 'bar',
                    data: dailyData.map(item => ({
                        value: item.count,
                        itemStyle: {
                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
                                { offset: 0, color: '#3b82f6' },
                                { offset: 1, color: '#1d4ed8' }
                            ])
                        }
                    })),
                    barWidth: '60%',
                    itemStyle: {
                        borderRadius: [4, 4, 0, 0]
                    }
                }]
            };

            chart.setOption(option);
            charts.weekly = chart;
        }

        function updateChannelChart(channelData) {
            if (charts.channel) {
                charts.channel.dispose();
            }

            const chart = echarts.init(document.getElementById('channelChart'));

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)'
                },
                series: [{
                    name: 'Channel Distribution',
                    type: 'pie',
                    radius: '70%',
                    data: channelData.map((item, index) => ({
                        value: item.count,
                        name: item.channel,
                        itemStyle: {
                            color: ['#667eea', '#764ba2', '#f093fb', '#f5576c', '#4facfe'][index % 5]
                        }
                    })),
                    itemStyle: {
                        borderRadius: 5,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    emphasis: {
                        itemStyle: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }]
            };

            chart.setOption(option);
            charts.channel = chart;
        }

        function updateSuccessChart(successData) {
            if (charts.success) {
                charts.success.dispose();
            }

            const chart = echarts.init(document.getElementById('successChart'));

            // Handle both naming conventions
            const successPercentage = successData.success_percentage || successData.successPercentage || 0;

            const option = {
                tooltip: {
                    trigger: 'item',
                    formatter: function(params) {
                        if (params.name === 'Success Rate') {
                            return `Success Rate: <strong>${params.value}%</strong>`;
                        }
                        return `${params.name}: <strong>${params.value}</strong>`;
                    }
                },
                series: [
                    {
                        name: 'Success Rate',
                        type: 'gauge',
                        startAngle: 180,
                        endAngle: 0,
                        min: 0,
                        max: 100,
                        splitNumber: 10,
                        itemStyle: {
                            color: '#10b981'
                        },
                        progress: {
                            show: true,
                            width: 30
                        },
                        pointer: {
                            show: false
                        },
                        axisLine: {
                            lineStyle: {
                                width: 30,
                                color: [[1, '#e5e7eb']]
                            }
                        },
                        axisTick: {
                            distance: -45,
                            splitNumber: 5,
                            lineStyle: {
                                width: 2,
                                color: '#999'
                            }
                        },
                        splitLine: {
                            distance: -52,
                            length: 14,
                            lineStyle: {
                                width: 3,
                                color: '#999'
                            }
                        },
                        axisLabel: {
                            distance: -20,
                            color: '#999',
                            fontSize: 12
                        },
                        anchor: {
                            show: false
                        },
                        title: {
                            show: false
                        },
                        detail: {
                            valueAnimation: true,
                            width: '60%',
                            lineHeight: 40,
                            borderRadius: 8,
                            offsetCenter: [0, '-15%'],
                            fontSize: 24,
                            fontWeight: 'bolder',
                            formatter: '{value}%',
                            color: 'inherit'
                        },
                        data: [{
                            value: successPercentage,
                            name: 'Success Rate'
                        }]
                    }
                ]
            };

            chart.setOption(option);
            charts.success = chart;
        }

        function updatePeakHoursList(peakHours) {
            const peakList = $('#peakTimesList');
            peakList.empty();

            if (!peakHours || peakHours.length === 0) {
                peakList.append('<li><div><span class="peak-time">No peak hours data available</span></div></li>');
                return;
            }

            peakHours.forEach((peak, index) => {
                const rankBadge = index === 0 ? '🥇' : index === 1 ? '🥈' : index === 2 ? '🥉' : `#${peak.rank}`;
                const hour = peak.hour || 0;
                const timeFormat = hour === 0 ? '12:00 AM' :
                                 hour < 12 ? `${hour}:00 AM` :
                                 hour === 12 ? '12:00 PM' :
                                 `${hour - 12}:00 PM`;

                peakList.append(`
                    <li>
                        <div>
                            <span class="peak-time">${rankBadge} ${timeFormat}</span>
                        </div>
                        <div>
                            <span class="peak-count">${(peak.count || 0).toLocaleString()}</span>
                        </div>
                    </li>
                `);
            });
        }

        // Handle window resize for charts
        window.addEventListener('resize', function() {
            Object.values(charts).forEach(chart => {
                if (chart && chart.resize) {
                    chart.resize();
                }
            });
        });

        // Auto-refresh every 5 minutes (optional - uncomment if needed)
        /*
        setInterval(function() {
            if (document.visibilityState === 'visible') {
                loadDashboardData();
            }
        }, 5 * 60 * 1000);
        */

        // Handle browser tab visibility change to pause/resume auto-refresh
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible') {
                // Tab became visible, refresh charts
                Object.values(charts).forEach(chart => {
                    if (chart && chart.resize) {
                        chart.resize();
                    }
                });
            }
        });

        // Initialize tooltips for better UX (if using Bootstrap)
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}